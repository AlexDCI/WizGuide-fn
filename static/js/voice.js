// voice.js ‚Äî press & hold + –≤–æ–ª–Ω—ã + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î + —è–∑—ã–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
document.addEventListener("DOMContentLoaded", () => {
  const FASTAPI_URL = "/voice/speech-translate";

  // –Ø–∑—ã–∫–∏ –±–µ—Ä—ë–º –∏–∑ —Ç–≤–æ–∏—Ö —Å–µ–ª–µ–∫—Ç–æ–≤ —Ñ–æ—Ä–º—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
  const uiSrc = document.getElementById("source_lang");
  const uiTgt = document.getElementById("target_lang");

  // –ú–∞–ø–ø–∏–Ω–≥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π -> –∫–æ–¥—ã. –í—Å—ë, —á—Ç–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:
  // source -> "auto", target -> "en" (—á—Ç–æ–±—ã FastAPI –Ω–µ –ø–∞–¥–∞–ª).
  const NAME2CODE = {
    "English":"en", "Russian":"ru", "German":"de",
    "Spanish":"es", "French":"fr", "Italian":"it",
    "Portuguese":"pt", "Chinese":"zh", "Chinese-Traditional":"zh-tw",
    "Japanese":"ja", "Korean":"ko", "Arabic":"ar",
    "Hindi":"hi", "Bengali":"bn", "Urdu":"ur",
    "Turkish":"tr", "Dutch":"nl", "Greek":"el",
    "Polish":"pl", "Czech":"cs", "Hungarian":"hu",
    "Swedish":"sv", "Danish":"da", "Finnish":"fi", "Norwegian":"no",
    "Hebrew":"he", "Thai":"th", "Vietnamese":"vi", "Indonesian":"id", "Malay":"ms",
    "Filipino":"fil", "Romanian":"ro", "Slovak":"sk", "Bulgarian":"bg",
    "Croatian":"hr", "Serbian":"sr", "Slovenian":"sl",
    "Lithuanian":"lt", "Latvian":"lv", "Estonian":"et",
    "Georgian":"ka", "Armenian":"hy", "Persian":"fa", "Pashto":"ps",
    "Azerbaijani":"az", "Kazakh":"kk", "Uzbek":"uz", "Tajik":"tg", "Turkmen":"tk", "Kyrgyz":"ky",
    "Mongolian":"mn", "Swahili":"sw", "Zulu":"zu", "Xhosa":"xh", "Afrikaans":"af",
    "Haitian Creole":"ht", "Basque":"eu", "Galician":"gl", "Catalan":"ca",
    "Irish":"ga", "Welsh":"cy", "Scottish Gaelic":"gd", "Maltese":"mt", "Icelandic":"is",
    "Sanskrit":"sa", "Tibetan":"bo", "Maori":"mi", "Samoan":"sm", "Tongan":"to"
  };
  const srcToCode = (name) => {
    if (!name || name === "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫") return "auto";
    return NAME2CODE[name] ? NAME2CODE[name] : "auto";
  };
  const tgtToCode = (name) => {
    if (!name || name === "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫") return "en";
    return NAME2CODE[name] ? NAME2CODE[name] : "en";
  };

  async function getJwt(){
    const r = await fetch("/api/token/me");
    if(!r.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JWT (–≤—ã –≤–æ—à–ª–∏?)");
    const j = await r.json();
    return j.access;
  }
  function getCookie(name){
    const m = document.cookie.match('(^|;)\\s*'+name+'\\s*=\\s*([^;]+)');
    return m ? m.pop() : '';
  }
  function escapeHtml(s){
    return (s || "").replace(/[&<>"']/g, ch => (
      { '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' }[ch]
    ));
  }
  function prependHistory(src, trg){
    const ul = document.querySelector('.chat-history ul.list-group');
    if (!ul) return;
    const li = document.createElement('li');
    li.className = 'list-group-item';
    li.innerHTML = `<strong>${escapeHtml(src||"")}</strong> ‚Üí <em>${escapeHtml(trg||"")}</em>`;
    ul.prepend(li);
  }

  // –≠–ª–µ–º–µ–Ω—Ç—ã UI –≥–æ–ª–æ—Å–∞
  const micBtn   = document.getElementById("micBtn");
  const statusEl = document.getElementById("v_status");
  const outSrc   = document.getElementById("v_src");
  const outTrg   = document.getElementById("v_trg");
  const canvas   = document.getElementById("micWaves");
  if (!(micBtn && statusEl && outSrc && outTrg && canvas)) return;

  if (!navigator.mediaDevices || !window.MediaRecorder) {
    statusEl.textContent = "‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ.";
    micBtn.disabled = true;
    return;
  }

  // === –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ¬´–≤–æ–ª–Ω¬ª ===
  const ctx = canvas.getContext("2d");
  let audioCtx = null, analyser = null, rafId = null;
  function drawWaves(){
    if (!analyser) return;
    const data = new Uint8Array(analyser.fftSize);
    analyser.getByteTimeDomainData(data);
    ctx.clearRect(0,0,canvas.width,canvas.height);
    ctx.save();
    ctx.translate(canvas.width/2, canvas.height/2);
    const baseR = 28, seg = 64;
    for (let i=0;i<seg;i++){
      const v = (data[Math.floor(i*data.length/seg)]-128)/128; // -1..1
      const r = baseR + 20*Math.abs(v);
      const a = (i/seg)*Math.PI*2;
      const x = Math.cos(a)*r, y = Math.sin(a)*r;
      ctx.fillStyle = "rgba(150, 126, 255, 0.22)";
      ctx.beginPath(); ctx.arc(x,y, 2.4 + 1.6*Math.abs(v), 0, Math.PI*2); ctx.fill();
    }
    ctx.restore();
    rafId = requestAnimationFrame(drawWaves);
  }

  // === –∑–∞–ø–∏—Å—å –ø–æ —É–¥–µ—Ä–∂–∞–Ω–∏—é –∫–Ω–æ–ø–∫–∏ ===
  let stream = null, mediaRecorder = null, chunks = [];
  let isRecording = false;

  function pickMime(){
    if (MediaRecorder.isTypeSupported("audio/webm;codecs=opus")) return {mime:"audio/webm;codecs=opus", ext:"webm"};
    if (MediaRecorder.isTypeSupported("audio/webm"))            return {mime:"audio/webm",               ext:"webm"};
    if (MediaRecorder.isTypeSupported("audio/mp4"))             return {mime:"audio/mp4",                ext:"mp4"};
    if (MediaRecorder.isTypeSupported("audio/ogg"))             return {mime:"audio/ogg",                ext:"ogg"};
    return {mime:"", ext:"webm"}; // –ø—É—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä —Ä–µ—à–∏—Ç
  }

  async function startRecording(){
    if (isRecording) return;
    try{
      stream = await navigator.mediaDevices.getUserMedia({audio:true});

      // –≤–æ–ª–Ω—ã
      audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      analyser = audioCtx.createAnalyser();
      analyser.fftSize = 1024;
      audioCtx.createMediaStreamSource(stream).connect(analyser);
      drawWaves();

      // –∑–∞–ø–∏—Å—å
      const {mime, ext} = pickMime();
      mediaRecorder = new MediaRecorder(stream, mime ? {mimeType:mime} : undefined);
      chunks = [];
      mediaRecorder.ondataavailable = e => { if(e.data && e.data.size) chunks.push(e.data); };
      mediaRecorder.onstop = async () => {
        try{ cancelAnimationFrame(rafId); }catch{}
        rafId = null;
        try{ audioCtx && audioCtx.close(); }catch{}
        audioCtx = null; analyser = null; ctx.clearRect(0,0,canvas.width,canvas.height);
        try{ stream && stream.getTracks().forEach(t => t.stop()); }catch{}
        stream = null;

        const blob = new Blob(chunks, {type: mime || "audio/webm"});
        const file = new File([blob], `recording.${ext}`, {type: mime || "audio/webm"});
        await sendToBackend(file);
      };

      mediaRecorder.start();
      isRecording = true;
      statusEl.textContent = "üî¥ –ó–∞–ø–∏—Å—å‚Ä¶ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É";
      outSrc.innerText = "üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n‚Äî";
      outTrg.innerText = "üåç –ü–µ—Ä–µ–≤–æ–¥:\n‚Äî";
    }catch(err){
      statusEl.textContent = "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: " + err.message;
      isRecording = false;
    }
  }

  function stopRecording(){
    if (!isRecording) return;
    try{ mediaRecorder && mediaRecorder.stop(); }catch{}
    isRecording = false;
    statusEl.textContent = "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶";
  }

  // –£–¥–µ—Ä–∂–∞–Ω–∏–µ: pointer-—Å–æ–±—ã—Ç–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –º—ã—à–∏/—Ç–∞—á–∞)
  micBtn.addEventListener("pointerdown", (e) => {
    e.preventDefault();
    micBtn.setPointerCapture(e.pointerId);
    startRecording();
  });
  micBtn.addEventListener("pointerup", (e) => {
    e.preventDefault();
    try{ micBtn.releasePointerCapture(e.pointerId); }catch{}
    stopRecording();
  });
  // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ —É—à–ª–∏ —Å –∫–Ω–æ–ø–∫–∏
  document.addEventListener("pointercancel", stopRecording);
  document.addEventListener("pointerleave",  () => {/* –∏–≥–Ω–æ—Ä */});

  // === –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ FastAPI + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Django ===
  async function sendToBackend(file){
    try{
      const srcName = uiSrc ? uiSrc.value : "English";
      const tgtName = uiTgt ? uiTgt.value : "Russian";
      const srcCode = srcToCode(srcName);     // 'auto' | 'ru' | 'en' | 'de'
      const tgtCode = tgtToCode(tgtName);     // 'ru' | 'en' | 'de'

      const token = await getJwt();

      const fd = new FormData();
      fd.append("file", file);
      fd.append("source_lang", srcCode);
      fd.append("target_lang", tgtCode);

      const resp = await fetch(FASTAPI_URL, {
        method: "POST",
        body: fd,
        headers: { "Authorization": "Bearer " + token }
      });

      let data;
      try { data = await resp.json(); }
      catch { data = { error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç FastAPI" }; }

      if (!resp.ok || data.error){
        statusEl.textContent = "‚ö†Ô∏è –û—à–∏–±–∫–∞ FastAPI: " + (data.error || resp.status);
        return;
      }

      statusEl.textContent = "‚úÖ –ì–æ—Ç–æ–≤–æ";
      outSrc.innerText = `üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n${data.source_text || "‚Äî"}`;
      outTrg.innerText = `üåç –ü–µ—Ä–µ–≤–æ–¥:\n${data.translated_text || "‚Äî"}`;

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é (—Ç–∞ –∂–µ –º–æ–¥–µ–ª—å ChatHistory)
      await fetch("/api/save-speech", {
        method:"POST",
        headers: {
          "Content-Type":"application/json",
          "X-CSRFToken": getCookie('csrftoken')
        },
        body: JSON.stringify({
          source_text: data.source_text,
          translated_text: data.translated_text,
          comment: null
        })
      });

      prependHistory(data.source_text, data.translated_text);

    }catch(err){
      statusEl.textContent = "‚ö†Ô∏è –û—à–∏–±–∫–∞: " + err.message;
    }
  }
});
